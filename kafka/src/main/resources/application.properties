## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------

#Kafka topic Name
kafka.topic.name=test

# How often should the messages be generated and pushed to Kafka Topic
timer.period = 10000
timer.delay = 10000

# uncomment to set Kafka credentials with SASL Plain
#camel.component.kafka.brokers=<YOUR_KAFKA_BROKERS_URL>
#camel.component.kafka.security-protocol=SASL_SSL
#camel.component.kafka.sasl-mechanism=PLAIN
#camel.component.kafka.sasl-jaas-config=org.apache.kafka.common.security.plain.PlainLoginModule required username="<YOUR_KAFKA_SASL_CLIENT_ID>" password="<YOUR_KAFKA_SASL_CLIENT_SECRET>";

# uncomment to set Kafka instance with SASL Oauth Bearer
#quarkus.ssl.native=true
#camel.component.kafka.brokers = <YOUR_KAFKA_BROKERS_URL>
#camel.component.kafka.security-protocol = SASL_SSL
#camel.component.kafka.sasl-mechanism = OAUTHBEARER
#camel.component.kafka.sasl-jaas-config = org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
#        oauth.client.id="<YOUR_KAFKA_SASL_CLIENT_ID>" \
#        oauth.client.secret="<YOUR_KAFKA_SASL_CLIENT_SECRET>" \
#        oauth.token.endpoint.uri="<YOUR_KAFKA_SASL_OAUTHBEARER_TOKEN_URL>" ;
#camel.component.kafka.additional-properties[sasl.login.callback.handler.class] = io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

#expose the service while deployment to openshift
quarkus.openshift.expose=true

# Uncomment to trust self signed certificates if they are presented by the Kubernetes API server
#quarkus.kubernetes-client.trust-certs=true

# The build strategy to use
quarkus.openshift.build-strategy=docker

# Uncomment to set resource limits
#quarkus.openshift.resources.requests.memory=64Mi
#quarkus.openshift.resources.requests.cpu=250m
#quarkus.openshift.resources.limits.memory=512Mi
#quarkus.openshift.resources.limits.cpu=1000m

# using QuarkusTestResourceLifecycleManager in this test
quarkus.kafka.devservices.enabled=false
